{
  "info": {
    "name": "Videoflix Login Tests - Complete Coverage",
    "description": "Comprehensive login endpoint testing with all possible status codes and scenarios",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_postman_id": "videoflix-login-tests-complete",
    "version": {
      "major": 1,
      "minor": 0,
      "patch": 0
    }
  },
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:8000",
      "type": "string"
    },
    {
      "key": "api_base",
      "value": "{{base_url}}/api",
      "type": "string"
    },
    {
      "key": "test_email",
      "value": "test@example.com",
      "type": "string"
    },
    {
      "key": "test_password",
      "value": "testpass123",
      "type": "string"
    },
    {
      "key": "access_token",
      "value": "",
      "type": "string"
    },
    {
      "key": "refresh_token",
      "value": "",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "Login Tests - Happy Paths",
      "item": [
        {
          "name": "200 - Successful Login with Valid Credentials",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test 200 Status Code",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "// Test Response Structure",
                  "pm.test(\"Response has correct structure\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('detail');",
                  "    pm.expect(jsonData).to.have.property('user');",
                  "    pm.expect(jsonData.user).to.have.property('id');",
                  "    pm.expect(jsonData.user).to.have.property('username');",
                  "});",
                  "",
                  "// Test Response Content",
                  "pm.test(\"Response contains correct message\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.detail).to.equal('Login successful');",
                  "});",
                  "",
                  "// Test User Object",
                  "pm.test(\"User object is valid\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.user.id).to.be.a('number');",
                  "    pm.expect(jsonData.user.username).to.be.a('string');",
                  "    pm.expect(jsonData.user.username).to.include('@');",
                  "});",
                  "",
                  "// Test JWT Cookies",
                  "pm.test(\"JWT cookies are set\", function () {",
                  "    const allSetCookieHeaders = pm.response.headers.all('Set-Cookie');",
                  "    const allCookies = allSetCookieHeaders.join('; ');",
                  "    pm.expect(allCookies).to.not.be.empty;",
                  "    pm.expect(allCookies).to.include('access_token');",
                  "    pm.expect(allCookies).to.include('refresh_token');",
                  "});",
                  "",
                  "// Test HttpOnly Cookies",
                  "pm.test(\"Cookies are HttpOnly\", function () {",
                  "    const allSetCookieHeaders = pm.response.headers.all('Set-Cookie');",
                  "    const allCookies = allSetCookieHeaders.join('; ');",
                  "    pm.expect(allCookies).to.not.be.empty;",
                  "    pm.expect(allCookies).to.include('HttpOnly');",
                  "});",
                  "",
                  "// Test Cookie Security Settings",
                  "pm.test(\"Cookies have security settings\", function () {",
                  "    const allSetCookieHeaders = pm.response.headers.all('Set-Cookie');",
                  "    const allCookies = allSetCookieHeaders.join('; ');",
                  "    pm.expect(allCookies).to.not.be.empty;",
                  "    pm.expect(allCookies).to.include('SameSite=Lax');",
                  "    pm.expect(allCookies).to.include('Max-Age');",
                  "});",
                  "",
                  "// Extract tokens for future use",
                  "const allSetCookieHeaders = pm.response.headers.all('Set-Cookie');",
                  "const setCookieHeader = allSetCookieHeaders.join('; ');",
                  "if (setCookieHeader) {",
                  "    const accessTokenMatch = setCookieHeader.match(/access_token=([^;]+)/);",
                  "    const refreshTokenMatch = setCookieHeader.match(/refresh_token=([^;]+)/);",
                  "    ",
                  "    if (accessTokenMatch) {",
                  "        pm.collectionVariables.set('access_token', accessTokenMatch[1]);",
                  "        console.log('Access token extracted and saved');",
                  "    }",
                  "    if (refreshTokenMatch) {",
                  "        pm.collectionVariables.set('refresh_token', refreshTokenMatch[1]);",
                  "        console.log('Refresh token extracted and saved');",
                  "    }",
                  "}",
                  "",
                  "// Test Response Time",
                  "pm.test(\"Response time is less than 2000ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});",
                  "",
                  "console.log('✅ Successful login test completed');",
                  "console.log('Response:', pm.response.text());"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{test_email}}\",\n  \"password\": \"{{test_password}}\"\n}"
            },
            "url": {
              "raw": "{{api_base}}/login/",
              "host": ["{{api_base}}"],
              "path": ["login", ""]
            }
          }
        }
      ]
    },
    {
      "name": "Login Tests - Unhappy Paths (400 Errors)",
      "item": [
        {
          "name": "400 - Invalid Credentials (Wrong Password)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test 400 Status Code",
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "// Test Error Structure",
                  "pm.test(\"Response has error structure\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('non_field_errors');",
                  "});",
                  "",
                  "// Test Error Message",
                  "pm.test(\"Error message is correct\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.non_field_errors[0]).to.equal('Please check your input and try again.');",
                  "});",
                  "",
                  "// Test No Cookies Set",
                  "pm.test(\"No JWT cookies are set on failed login\", function () {",
                  "    const allSetCookieHeaders = pm.response.headers.all('Set-Cookie');",
                  "    if (allSetCookieHeaders && allSetCookieHeaders.length > 0) {",
                  "        const allCookies = allSetCookieHeaders.join('; ');",
                  "        pm.expect(allCookies).to.not.include('access_token');",
                  "        pm.expect(allCookies).to.not.include('refresh_token');",
                  "    } else {",
                  "        // No cookies header is expected for failed login",
                  "        pm.expect(allSetCookieHeaders).to.be.empty;",
                  "    }",
                  "});",
                  "",
                  "console.log('❌ Wrong password test completed');",
                  "console.log('Response:', pm.response.text());"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{test_email}}\",\n  \"password\": \"wrongpassword123\"\n}"
            },
            "url": {
              "raw": "{{api_base}}/login/",
              "host": ["{{api_base}}"],
              "path": ["login", ""]
            }
          }
        },
        {
          "name": "400 - Invalid Credentials (Nonexistent User)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test 400 Status Code",
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "// Test Error Message",
                  "pm.test(\"Error message is correct\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.non_field_errors[0]).to.equal('Please check your input and try again.');",
                  "});",
                  "",
                  "console.log('❌ Nonexistent user test completed');"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"nonexistent@example.com\",\n  \"password\": \"{{test_password}}\"\n}"
            },
            "url": {
              "raw": "{{api_base}}/login/",
              "host": ["{{api_base}}"],
              "path": ["login", ""]
            }
          }
        },
        {
          "name": "400 - Missing Email Field",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test 400 Status Code",
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "// Test Field Error",
                  "pm.test(\"Email field error is present\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('email');",
                  "    pm.expect(jsonData.email[0]).to.equal('This field is required.');",
                  "});",
                  "",
                  "console.log('❌ Missing email field test completed');"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"password\": \"{{test_password}}\"\n}"
            },
            "url": {
              "raw": "{{api_base}}/login/",
              "host": ["{{api_base}}"],
              "path": ["login", ""]
            }
          }
        },
        {
          "name": "400 - Missing Password Field",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test 400 Status Code",
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "// Test Field Error",
                  "pm.test(\"Password field error is present\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('password');",
                  "    pm.expect(jsonData.password[0]).to.equal('This field is required.');",
                  "});",
                  "",
                  "console.log('❌ Missing password field test completed');"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{test_email}}\"\n}"
            },
            "url": {
              "raw": "{{api_base}}/login/",
              "host": ["{{api_base}}"],
              "path": ["login", ""]
            }
          }
        },
        {
          "name": "400 - Empty Request Body",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test 400 Status Code",
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "// Test Field Errors",
                  "pm.test(\"Both field errors are present\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('email');",
                  "    pm.expect(jsonData).to.have.property('password');",
                  "});",
                  "",
                  "console.log('❌ Empty request body test completed');"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{}"
            },
            "url": {
              "raw": "{{api_base}}/login/",
              "host": ["{{api_base}}"],
              "path": ["login", ""]
            }
          }
        },
        {
          "name": "400 - Invalid Email Format",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test 400 Status Code",
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "// Test Email Validation Error",
                  "pm.test(\"Email validation error is present\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('email');",
                  "    // Accept various email validation error messages",
                  "    const emailError = jsonData.email[0];",
                  "    pm.expect(emailError).to.satisfy(function(msg) {",
                  "        return msg.includes('valid email') || ",
                  "               msg.includes('Enter a valid email address') || ",
                  "               msg.includes('invalid') || ",
                  "               msg.includes('email');",
                  "    });",
                  "});",
                  "",
                  "console.log('❌ Invalid email format test completed');"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"invalid-email-format\",\n  \"password\": \"{{test_password}}\"\n}"
            },
            "url": {
              "raw": "{{api_base}}/login/",
              "host": ["{{api_base}}"],
              "path": ["login", ""]
            }
          }
        },
        {
          "name": "400 - Inactive User (Unverified Email)",
          "event": [
            {
              "listen": "pre-request",
              "script": {
                "exec": [
                  "// This test assumes an inactive user exists",
                  "// You may need to create one through registration first"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test 400 Status Code",
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "// Test Error Message",
                  "pm.test(\"Authentication error for inactive user\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    // Could be either authentication failure or email verification error",
                  "    pm.expect(jsonData).to.have.property('non_field_errors');",
                  "    const errorMsg = jsonData.non_field_errors[0];",
                  "    pm.expect(errorMsg).to.satisfy(function(msg) {",
                  "        return msg === 'Please check your input and try again.' ||",
                  "               msg === 'Please verify your email before logging in.';",
                  "    });",
                  "});",
                  "",
                  "console.log('❌ Inactive user test completed');"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"inactive@example.com\",\n  \"password\": \"TestPass123\"\n}"
            },
            "url": {
              "raw": "{{api_base}}/login/",
              "host": ["{{api_base}}"],
              "path": ["login", ""]
            }
          }
        }
      ]
    },
    {
      "name": "Login Tests - HTTP Method Errors",
      "item": [
        {
          "name": "405 - Method Not Allowed (GET)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test 405 Status Code",
                  "pm.test(\"Status code is 405\", function () {",
                  "    pm.response.to.have.status(405);",
                  "});",
                  "",
                  "// Test Allow Header",
                  "pm.test(\"Allow header is present\", function () {",
                  "    pm.expect(pm.response.headers.get('Allow')).to.include('POST');",
                  "});",
                  "",
                  "console.log('❌ GET method not allowed test completed');"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{api_base}}/login/",
              "host": ["{{api_base}}"],
              "path": ["login", ""]
            }
          }
        },
        {
          "name": "405 - Method Not Allowed (PUT)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test 405 Status Code",
                  "pm.test(\"Status code is 405\", function () {",
                  "    pm.response.to.have.status(405);",
                  "});",
                  "",
                  "console.log('❌ PUT method not allowed test completed');"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{test_email}}\",\n  \"password\": \"{{test_password}}\"\n}"
            },
            "url": {
              "raw": "{{api_base}}/login/",
              "host": ["{{api_base}}"],
              "path": ["login", ""]
            }
          }
        },
        {
          "name": "405 - Method Not Allowed (DELETE)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test 405 Status Code",
                  "pm.test(\"Status code is 405\", function () {",
                  "    pm.response.to.have.status(405);",
                  "});",
                  "",
                  "console.log('❌ DELETE method not allowed test completed');"
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{api_base}}/login/",
              "host": ["{{api_base}}"],
              "path": ["login", ""]
            }
          }
        }
      ]
    },
    {
      "name": "Login Tests - Content Type Errors",
      "item": [
        {
          "name": "415 - Unsupported Media Type (Form Data)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test for either 400 or 415 status",
                  "pm.test(\"Status code is 400 or 415\", function () {",
                  "    pm.expect([400, 415]).to.include(pm.response.code);",
                  "});",
                  "",
                  "console.log('❌ Form data content type test completed');",
                  "console.log('Status:', pm.response.code);",
                  "console.log('Response:', pm.response.text());"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/x-www-form-urlencoded"
              }
            ],
            "body": {
              "mode": "urlencoded",
              "urlencoded": [
                {
                  "key": "email",
                  "value": "{{test_email}}",
                  "type": "text"
                },
                {
                  "key": "password",
                  "value": "{{test_password}}",
                  "type": "text"
                }
              ]
            },
            "url": {
              "raw": "{{api_base}}/login/",
              "host": ["{{api_base}}"],
              "path": ["login", ""]
            }
          }
        },
        {
          "name": "400 - Invalid JSON",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test 400 Status Code",
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "// Test JSON Parse Error",
                  "pm.test(\"JSON parse error is returned\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    const responseText = JSON.stringify(jsonData).toLowerCase();",
                  "    pm.expect(responseText).to.satisfy(function(text) {",
                  "        return text.includes('json') || ",
                  "               text.includes('parse') || ",
                  "               text.includes('syntax') ||",
                  "               text.includes('expecting');",
                  "    });",
                  "});",
                  "",
                  "console.log('❌ Invalid JSON test completed');"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{ invalid json syntax"
            },
            "url": {
              "raw": "{{api_base}}/login/",
              "host": ["{{api_base}}"],
              "path": ["login", ""]
            }
          }
        }
      ]
    },
    {
      "name": "Edge Cases & Security Tests",
      "item": [
        {
          "name": "SQL Injection Attempt",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test 400 Status Code (should not succeed)",
                  "pm.test(\"Status code is 400 (SQL injection blocked)\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "// Test that request handled safely",
                  "pm.test(\"SQL injection attempt handled safely\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    // Should return normal error structure",
                  "    pm.expect(jsonData).to.satisfy(function(data) {",
                  "        return data.hasOwnProperty('non_field_errors') || ",
                  "               data.hasOwnProperty('email');",
                  "    });",
                  "});",
                  "",
                  "// Test that no sensitive information is leaked",
                  "pm.test(\"No database errors leaked\", function () {",
                  "    const response = pm.response.text();",
                  "    pm.expect(response).to.not.include('SQL');",
                  "    pm.expect(response).to.not.include('database');",
                  "    pm.expect(response).to.not.include('postgres');",
                  "});",
                  "",
                  "console.log('🔒 SQL injection test completed');"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"test@example.com'; DROP TABLE auth_user; --\",\n  \"password\": \"{{test_password}}\"\n}"
            },
            "url": {
              "raw": "{{api_base}}/login/",
              "host": ["{{api_base}}"],
              "path": ["login", ""]
            }
          }
        },
        {
          "name": "XSS Attempt in Email",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test 400 Status Code",
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "// Test that request handled safely",
                  "pm.test(\"XSS attempt handled safely\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    // Should return normal error structure",
                  "    pm.expect(jsonData).to.satisfy(function(data) {",
                  "        return data.hasOwnProperty('non_field_errors') || ",
                  "               data.hasOwnProperty('email');",
                  "    });",
                  "});",
                  "",
                  "// Test that script tags are not executed",
                  "pm.test(\"XSS attempt blocked\", function () {",
                  "    const response = pm.response.text();",
                  "    pm.expect(response).to.not.include('<script>');",
                  "});",
                  "",
                  "console.log('🔒 XSS test completed');"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"<script>alert('xss')</script>@example.com\",\n  \"password\": \"{{test_password}}\"\n}"
            },
            "url": {
              "raw": "{{api_base}}/login/",
              "host": ["{{api_base}}"],
              "path": ["login", ""]
            }
          }
        },
        {
          "name": "Very Long Email Input",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test 400 Status Code",
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "// Test Long Input Handled",
                  "pm.test(\"Long input handled gracefully\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    // Could be either authentication error or validation error",
                  "    pm.expect(jsonData).to.satisfy(function(data) {",
                  "        return data.hasOwnProperty('non_field_errors') || ",
                  "               data.hasOwnProperty('email');",
                  "    });",
                  "});",
                  "",
                  "console.log('🔒 Long input test completed');"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"verylongemailaddressthatexceedsnormallimitsandshouldberejectedddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd@example.com\",\n  \"password\": \"{{test_password}}\"\n}"
            },
            "url": {
              "raw": "{{api_base}}/login/",
              "host": ["{{api_base}}"],
              "path": ["login", ""]
            }
          }
        },
        {
          "name": "Unicode Characters in Email",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test 400 Status Code (assuming Unicode emails not supported)",
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "console.log('🔒 Unicode test completed');"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"тест@example.com\",\n  \"password\": \"{{test_password}}\"\n}"
            },
            "url": {
              "raw": "{{api_base}}/login/",
              "host": ["{{api_base}}"],
              "path": ["login", ""]
            }
          }
        }
      ]
    },
    {
      "name": "Performance & Load Tests",
      "item": [
        {
          "name": "Response Time Test",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test Response Time",
                  "pm.test(\"Response time is acceptable\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});",
                  "",
                  "// Test Status (can be either 200 or 400)",
                  "pm.test(\"Status code is valid\", function () {",
                  "    pm.expect([200, 400]).to.include(pm.response.code);",
                  "});",
                  "",
                  "console.log('⏱️ Response time:', pm.response.responseTime + 'ms');"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{test_email}}\",\n  \"password\": \"{{test_password}}\"\n}"
            },
            "url": {
              "raw": "{{api_base}}/login/",
              "host": ["{{api_base}}"],
              "path": ["login", ""]
            }
          }
        }
      ]
    },
    {
      "name": "Environment Setup Tests",
      "item": [
        {
          "name": "Server Health Check",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test that server is responding",
                  "pm.test(\"Server is responding\", function () {",
                  "    pm.expect([200, 400, 404, 405]).to.include(pm.response.code);",
                  "});",
                  "",
                  "// Test response time",
                  "pm.test(\"Server response time acceptable\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                  "});",
                  "",
                  "console.log('🔍 Server health check completed');",
                  "console.log('Response time:', pm.response.responseTime + 'ms');"
                ]
              }
            }
          ],
          "request": {
            "method": "OPTIONS",
            "header": [],
            "url": {
              "raw": "{{api_base}}/login/",
              "host": ["{{api_base}}"],
              "path": ["login", ""]
            }
          }
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global pre-request script",
          "console.log('🚀 Starting Videoflix Login Test Suite');",
          "console.log('Base URL:', pm.collectionVariables.get('base_url'));",
          "console.log('Test Email:', pm.collectionVariables.get('test_email'));"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global test script - runs after each request",
          "console.log('📊 Test completed for:', pm.info.requestName);",
          "console.log('Status:', pm.response.code, pm.response.status);",
          "",
          "// Track test results",
          "if (pm.response.code >= 200 && pm.response.code < 300) {",
          "    console.log('✅ Success response');",
          "} else if (pm.response.code >= 400 && pm.response.code < 500) {",
          "    console.log('⚠️ Client error (expected for negative tests)');",
          "} else if (pm.response.code >= 500) {",
          "    console.log('❌ Server error - needs investigation');",
          "}",
          "",
          "console.log('---');"
        ]
      }
    }
  ]
}
